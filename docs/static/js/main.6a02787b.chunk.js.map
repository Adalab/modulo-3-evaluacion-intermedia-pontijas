{"version":3,"sources":["data/pokemon.js","components/Pokemon.js","components/PokeList.js","components/App.js","serviceWorker.js","index.js"],"names":["id","name","types","evolution","url","Pokemon","props","src","pokemon","alt","PokeList","htmlCode","map","key","className","App","useState","pokemonData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAAe,GACb,CACEA,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,KACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,UACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,YACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,WACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,UACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,aACNC,MAAO,CAAC,QACRC,UAAW,KACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,aACNC,MAAO,CAAC,QACRC,UAAW,aACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SAAU,QAClBC,UAAW,aACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,WACNC,MAAO,CAAC,SACRC,UAAW,KACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SACRC,UAAW,WACXC,IAAK,kFAEP,CACEJ,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SACRC,UAAW,YACXC,IAAK,kFAEP,CACEJ,GAAI,GACJC,KAAM,WACNC,MAAO,CAAC,OACRC,UAAW,KACXC,IAAK,oFCzDMC,EAVC,SAACC,GAEf,OACE,6BACE,yBAAKC,IAAKD,EAAME,QAAQJ,IAAKK,IAAI,YACjC,4BAAKH,EAAME,QAAQP,QCaVS,G,KAhBE,SAACJ,GAEhB,IAAMK,EAAWL,EAAME,QAAQI,KAAI,SAACJ,GAClC,OACE,wBAAIK,IAAKL,EAAQR,GAAIc,UAAU,aAC7B,kBAAC,EAAD,CAASN,QAASA,QAIxB,OACE,6BACE,wBAAIM,UAAU,aAAaH,MCDlBI,EATH,WAAO,IAAD,EACEC,mBAASC,GAApBT,EADS,oBAEhB,OACE,yBAAKM,UAAU,YACb,kBAAC,EAAD,CAAUN,QAASA,MCGLU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6a02787b.chunk.js","sourcesContent":["export default [\r\n  {\r\n    id: 1,\r\n    name: 'bulbasaur',\r\n    types: ['poison', 'grass'],\r\n    evolution: null,\r\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'ivysaur',\r\n    types: ['poison', 'grass'],\r\n    evolution: 'bulbasaur',\r\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'venusaur',\r\n    types: ['poison', 'grass'],\r\n    evolution: 'ivysaur',\r\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'charmander',\r\n    types: ['fire'],\r\n    evolution: null,\r\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'charmeleon',\r\n    types: ['fire'],\r\n    evolution: 'charmander',\r\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'charizard',\r\n    types: ['flying', 'fire'],\r\n    evolution: 'charmeleon',\r\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png',\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'squirtle',\r\n    types: ['water'],\r\n    evolution: null,\r\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png',\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'wartortle',\r\n    types: ['water'],\r\n    evolution: 'squirtle',\r\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png',\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'blastoise',\r\n    types: ['water'],\r\n    evolution: 'wartortle',\r\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png',\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'caterpie',\r\n    types: ['bug'],\r\n    evolution: null,\r\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png',\r\n  },\r\n];\r\n","import React from 'react';\r\n\r\nconst Pokemon = (props) => {\r\n  // console.log('recibo el objeto entero', props.pokemon);\r\n  return (\r\n    <div>\r\n      <img src={props.pokemon.url} alt=\"pokemon\" />\r\n      <h2>{props.pokemon.name}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pokemon;\r\n","import React from 'react';\r\nimport Pokemon from './Pokemon';\r\nimport '../stylesheets/App.scss';\r\n\r\nconst PokeList = (props) => {\r\n  // console.log(props.pokemon);\r\n  const htmlCode = props.pokemon.map((pokemon) => {\r\n    return (\r\n      <li key={pokemon.id} className=\"poke-item\">\r\n        <Pokemon pokemon={pokemon} />\r\n      </li>\r\n    );\r\n  });\r\n  return (\r\n    <div>\r\n      <ul className=\"poke-list\">{htmlCode}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokeList;\r\n","import React, { useState } from 'react';\nimport pokemonData from '../data/pokemon';\nimport PokeList from './PokeList';\nimport '../stylesheets/App.scss';\n\nconst App = () => {\n  const [pokemon] = useState(pokemonData);\n  return (\n    <div className=\"poke-app\">\n      <PokeList pokemon={pokemon} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}