{"version":3,"sources":["components/PokeCard.js","components/PokeList.js","components/App.js","serviceWorker.js","index.js"],"names":["PokeCard","className","src","this","props","url","alt","React","Component","PokeList","pokeInfo","id","name","types","evolution","App","state","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+NAeeA,G,4KAVX,OACE,yBAAKC,UAAU,aACb,yBAAKC,IAAKC,KAAKC,MAAMC,IAAKC,IAAI,YAC9B,sCACA,4C,GANeC,IAAMC,YCsBdC,E,uKAnBX,OACE,6BAASR,UAAU,mBACjB,gDACA,wBAAIA,UAAU,qBACZ,4BACE,kBAAC,EAAD,OAEF,4BACE,kBAAC,EAAD,OAEF,4BACE,kBAAC,EAAD,a,GAbWM,IAAMC,WCAvBE,EAAW,CACf,CACEC,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,KACXT,IAAK,kFAEP,CACEM,GAAI,EACJC,KAAM,UACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,YACXT,IAAK,kFAEP,CACEM,GAAI,EACJC,KAAM,WACNC,MAAO,CAAC,SAAU,SAClBC,UAAW,UACXT,IAAK,kFAEP,CACEM,GAAI,EACJC,KAAM,aACNC,MAAO,CAAC,QACRC,UAAW,KACXT,IAAK,kFAEP,CACEM,GAAI,EACJC,KAAM,aACNC,MAAO,CAAC,QACRC,UAAW,aACXT,IAAK,kFAEP,CACEM,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SAAU,QAClBC,UAAW,aACXT,IAAK,kFAEP,CACEM,GAAI,EACJC,KAAM,WACNC,MAAO,CAAC,SACRC,UAAW,KACXT,IAAK,kFAEP,CACEM,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SACRC,UAAW,WACXT,IAAK,kFAEP,CACEM,GAAI,EACJC,KAAM,YACNC,MAAO,CAAC,SACRC,UAAW,YACXT,IAAK,kFAEP,CACEM,GAAI,GACJC,KAAM,WACNC,MAAO,CAAC,OACRC,UAAW,KACXT,IAAK,oFAgBMU,E,kDAXb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQN,EACbO,QAAQC,IAAI,QAASR,GAHJ,E,qDAOjB,OAAO,kBAAC,EAAD,U,GAROH,IAAMC,WCjEJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.614dce7e.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../stylesheets/App.scss';\r\n\r\nclass PokeCard extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"poke-card\">\r\n        <img src={this.props.url} alt=\"pokemon\" />\r\n        <h2>nombre</h2>\r\n        <small>tipo</small>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokeCard;\r\n","import React from 'react';\r\nimport PokeCard from './PokeCard.js';\r\nimport '../stylesheets/App.scss';\r\n\r\nclass PokeList extends React.Component {\r\n  render() {\r\n    return (\r\n      <section className=\"section-pokemon\">\r\n        <h1>Mi lista Pokemon</h1>\r\n        <ul className=\"section-poke_list\">\r\n          <li>\r\n            <PokeCard />\r\n          </li>\r\n          <li>\r\n            <PokeCard />\r\n          </li>\r\n          <li>\r\n            <PokeCard />\r\n          </li>\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokeList;\r\n","import React from 'react';\nimport PokeList from './PokeList.js';\nimport '../stylesheets/App.scss';\n\nconst pokeInfo = [\n  {\n    id: 1,\n    name: 'bulbasaur',\n    types: ['poison', 'grass'],\n    evolution: null,\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png',\n  },\n  {\n    id: 2,\n    name: 'ivysaur',\n    types: ['poison', 'grass'],\n    evolution: 'bulbasaur',\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/2.png',\n  },\n  {\n    id: 3,\n    name: 'venusaur',\n    types: ['poison', 'grass'],\n    evolution: 'ivysaur',\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/3.png',\n  },\n  {\n    id: 4,\n    name: 'charmander',\n    types: ['fire'],\n    evolution: null,\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/4.png',\n  },\n  {\n    id: 5,\n    name: 'charmeleon',\n    types: ['fire'],\n    evolution: 'charmander',\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/5.png',\n  },\n  {\n    id: 6,\n    name: 'charizard',\n    types: ['flying', 'fire'],\n    evolution: 'charmeleon',\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/6.png',\n  },\n  {\n    id: 7,\n    name: 'squirtle',\n    types: ['water'],\n    evolution: null,\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/7.png',\n  },\n  {\n    id: 8,\n    name: 'wartortle',\n    types: ['water'],\n    evolution: 'squirtle',\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/8.png',\n  },\n  {\n    id: 9,\n    name: 'blastoise',\n    types: ['water'],\n    evolution: 'wartortle',\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/9.png',\n  },\n  {\n    id: 10,\n    name: 'caterpie',\n    types: ['bug'],\n    evolution: null,\n    url: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/10.png',\n  },\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = pokeInfo;\n    console.log('array', pokeInfo);\n  }\n\n  render() {\n    return <PokeList />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}